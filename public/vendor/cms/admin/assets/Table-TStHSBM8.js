import{_ as r,b as u,$ as c,o as m}from"../index.js";const s={props:{modelValue:{type:String,default:""},config:{type:Object,default:()=>{}},readonly:{type:Boolean,default:!1},context:{type:Object}},emits:["update:modelValue","error"],methods:{check(e){let l=0,t=0;return e.split(`
`).forEach(n=>{t+=n.split(";").length,l++}),l?Number.isInteger(t/l):!0},update(e){this.$emit("update:modelValue",e.replace(/(\r)+/g,"").replace(/^\n+/,"").replace(/\n{2,}$/g,`
`)),this.validate()},async validate(){var l;await this.$nextTick();const e=await((l=this.$refs.field)==null?void 0:l.validate());return this.$emit("error",(e==null?void 0:e.length)>0),!(e!=null&&e.length)}},watch:{modelValue:{immediate:!0,handler(e){this.validate()}}}};function f(e,l,t,n,h,i){return m(),u(c,{ref:"field",rules:[a=>!t.config.required||!!a||e.$gettext("Field is required"),a=>{var d,o;return!t.config.min||+((o=(d=a==null?void 0:a.split(`
`)[0])==null?void 0:d.split(";"))==null?void 0:o.length)>=+t.config.min||e.$gettext("Minimum are %{num} columns",{num:t.config.min})},a=>i.check(a)||e.$gettext("The number of columns is not the same in all rows")],"auto-grow":!0,readonly:t.readonly,placeholder:t.config.placeholder||`val;val;val
val;val;val`,modelValue:t.modelValue,"onUpdate:modelValue":l[0]||(l[0]=a=>i.update(a)),variant:"outlined","hide-details":"auto",density:"comfortable",clearable:""},null,8,["rules","readonly","placeholder","modelValue"])}const p=r(s,[["render",f]]);export{p as default};
