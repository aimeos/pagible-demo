import{_ as i,b as o,E as n,o as r}from"../index.js";const s={props:{modelValue:{type:String,default:""},config:{type:Object,default:()=>{}},readonly:{type:Boolean,default:!1}},emits:["update:modelValue","error"],methods:{check(e){const t=this.config.allowed||["http","https"];return t.every(a=>/^[a-z]+/.test(a))?e?new RegExp(`^((${t.join("|")}://)?([^/s@:]+(:[^/s@:]+)?@)?([0-9a-z]+[.-])*[0-9a-z]+.[a-z]{2,}(:[0-9]{1,5})?)?(/.*)?$`).test(e):!0:this.$gettext("Invalid URL schema configuration")},update(e){this.$emit("update:modelValue",e),this.validate()},async validate(){var t;await this.$nextTick();const e=await((t=this.$refs.field)==null?void 0:t.validate());return this.$emit("error",(e==null?void 0:e.length)>0),!(e!=null&&e.length)}},watch:{modelValue:{immediate:!0,handler(e){this.validate()}}}};function u(e,t,a,c,f,d){return r(),o(n,{ref:"field",placeholder:a.config.placeholder||"",rules:[l=>!a.config.required||!!l||e.$gettext("Value is required"),l=>d.check(l)||e.$gettext("Not a valid URL")],readonly:a.readonly,modelValue:a.modelValue,"onUpdate:modelValue":t[0]||(t[0]=l=>d.update(l)),density:"comfortable","hide-details":"auto",variant:"outlined",class:"ltr",clearable:""},null,8,["placeholder","rules","readonly","modelValue"])}const m=i(s,[["render",u]]);export{m as default};
